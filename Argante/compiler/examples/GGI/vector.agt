# GGI Vector Drawing Example
#
# This example implements a simple (2D) vector drawing routine and draws
# some vectors spelling out "Argante".

!SIGNATURE      "GGI Vector Drawing Example"
!PRIORITY       1000

.DATA

:Name   # Name of the visual.
        "Demo"

:ID     # Visual ID (for saving it)
        0

# This is the vector data to spell out "Argante" in cool letters. :-)
# See the DrawVector routine for info on the layout.
#
# Note: This is one reason why agtc needs rewriting; every data dword
#       *must* have a label. :-/ That's why all the __??? labels are
#       there: to keep agtc happy. Ugly, yes.

:bigA
      0  30	 # Initial offset
     10 -30  # Coordinates
     10  30
    -10   0
      0 -10
      0  10
    -10   0

:smallR
      0  20  # Initial offset
      0  10  # Coordinates
      0  -5
      5  -5
      5   0

:smallG
     10  30  # Initial offset
    -10   0  # Coordinates
      0 -10
     10   0
      0  15
    -10   0

:smallA
     10  25  # Initial offset
     -5   5  # Coordinates
     -5   0
      0 -10
     10   0
      0  10

:smallN
      0  30  # Initial offset
      0 -10  # Coordinates
     10   0
      0  10

:smallT
      0  20  # Initial offset
     10   0  # Coordinates
     -5   0
      0  -5
      0  15
      5   0

:smallE
     10  30  # Initial offset
    -10   0  # Coordinates
      0 -10
     10   0
      0   5
     -5   0

.CODE
        # Setup the visual and stuff.
        call    :SetupGFX

        # Setup color for drawing (blue)
        mov     u1,0x0000
        mov     u2,0x0000
        mov     u3,0xFFFF
        mov     u4,0xFFFF
        syscall $GGI_MAPCOLOR
        syscall $GGI_SETGCFOREGROUND

        # Draw "A"
        mov     u1,:bigA
        mov     u2,%bigA
        mov     s1,100
        mov     s2,100
        call    :DrawVector

        # Draw "r"
        mov     u1,:smallR
        mov     u2,%smallR
        mov     s1,125
        mov     s2,100
        call    :DrawVector

        # Draw "g"
        mov     u1,:smallG
        mov     u2,%smallG
        mov     s1,140
        mov     s2,100
        call    :DrawVector

        # Draw "a"
        mov     u1,:smallA
        mov     u2,%smallA
        mov     s1,155
        mov     s2,100
        call    :DrawVector

        # Draw "n"
        mov     u1,:smallN
        mov     u2,%smallN
        mov     s1,170
        mov     s2,100

        # Draw "t"
        call    :DrawVector
        mov     u1,:smallT
        mov     u2,%smallT
        mov     s1,185
        mov     s2,100

        # Draw "e"
        call    :DrawVector
        mov     u1,:smallE
        mov     u2,%smallE
        mov     s1,200
        mov     s2,100
        call    :DrawVector

        # Wait for a keypress before shutting down.
        syscall $GGI_GETC
        syscall $GGI_CLOSE
        halt

# Routine that draws a simple 2D vector.
#
# Inputs:  u0 - visual ID
#          u1 - pointer to vector data
#          u2 - length of vector data (in dwords; must be an even amount)
#          s1 - initial x offset
#          s2 - initial y offset
# Outputs: none
# Result:  Hopefully a correctly drawn vector. :-)
#
# The vector data consists of coordinates represented as pairs of dwords.
# The first coordinate in the array is the offset to "move to" before
# starting to draw. At each coordinate, a line is drawn from it to the
# preceding coordinate in the data.

:DrawVector
        # Check if there is atleast two coordinate pairs
        ifbel   u2,4
        jmp     :DV_exit

        # Calculate the initial coordinate by adding
        # start offset to initial offset.
        add     s1,*u1
        add     u1,1
        add     s2,*u1
        add     u1,1
        sub     u2,2

:DV_loop
        # Do we have 2 more coordinates?
        ifbel   u2,2
        jmp     :DV_exit

        # Save the previous coordinates.
        mov     s3,s1
        mov     s4,s2

        # Calculate the current coordinates.
        add     s1,*u1
        add     u1,1
        add     s2,*u1
        add     u1,1
        sub     u2,2

        syscall $GGI_DRAWLINE
        jmp     :DV_loop

:DV_exit
        ret     0

# Routine that sets up the visual.

:SetupGFX
        # Open the visual.
        mov     u1,:Name
        mov     u2,^Name
        syscall $GGI_OPEN

        # Save the ID.
        mov     *:ID,u0

        # Set the mode (only the resolution; we don't care about depth etc).
        mov     u1,640
        mov     u2,480
        mov     u3,0
        mov     u4,0
        syscall $GGI_SETSIMPLEMODE

        # Make sure we have a usable palette if in CLUT mode. Since this
        # may fail (throw ERROR_GGI_CONTROL), we need to have an exception
        # handler installed.
        onfail  :Except
        syscall $GGI_SETCOLORFULPALETTE
        nofail

        # Make a nice, black background.
        mov     u1,0x0000
        mov     u2,0x0000
        mov     u3,0x0000
        mov     u4,0xFFFF
        syscall $GGI_MAPCOLOR
        syscall $GGI_SETGCFOREGROUND
        syscall $GGI_FILLSCREEN

        ret     0

# Minimal exception handler.

:Except
        ret     0
        