# Integer arithmetic benchmark
#
# This is a simple benchmarking program that tests the performance
# of various integer arithmetic opcodes. The following tests are
# performed:
#
# + Addition
# + Subtraction
# + Multiplication
# + Division

!SIGNATURE      "Integer arithmetic benchmark"
!PRIORITY       10000

.DATA

.define     TIMES   10000000 # Execute loop body this many times.

:sNL
    "\n"
:sAdditions
    "Additions / second: "
:sSubtractions
    "Subtractions / second: "
:sMultiplications
    "Multiplications / second: "
:sDivisions
    "Divisions / second: "
    
.CODE
    twait   2000            # Wait for the prompt so it doesn't screw
                            # our output later on.

    mov     u0,:sAdditions
    mov     u1,^sAdditions
    syscall $IO_PUTSTRING

    mov     s0,TIMES        # Initialize loop counter
    div     s0,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                            # (divide here to cut the running time a bit)
    sub     s0,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u4,u0           # Save the seconds
    mov     u5,u1           # Save the microseconds

:loop
    add     u0,125
    add     u1,-77331
    add     u0,u1
    add     u1,u1
    add     u9,12441233
    add     u8,u1
    add     u9,u8
    add     u9,-8843
    add     u8,u9
    add     u7,u1
    add     u7,u2
    add     u0,-1
    add     u0,u3
    add     u9,u7
    add     u8,10924
    add     u8,-42            
    add     u0,125
    add     u1,-77331
    add     u0,u1
    add     u1,u1
    add     u9,12441233
    add     u8,u1
    add     u9,u8
    add     u9,-8843
    add     u8,u9
    add     u7,u1
    add     u7,u2
    add     u0,-1
    add     u0,u3
    add     u9,u7
    add     u8,10924
    add     u8,-42            
    add     u0,125
    add     u1,-77331
    add     u0,u1
    add     u1,u1
    add     u9,12441233
    add     u8,u1
    add     u9,u8
    add     u9,-8843
    add     u8,u9
    add     u7,u1
    add     u7,u2
    add     u0,-1
    add     u0,u3
    add     u9,u7
    add     u8,10924
    add     u8,-42            
    add     u0,125
    add     u1,-77331
    add     u0,u1
    add     u1,u1
    add     u9,12441233
    add     u8,u1
    add     u9,u8
    add     u9,-8843
    add     u8,u9
    add     u7,u1
    add     u7,u2
    add     u0,-1
    add     u0,u3
    add     u9,u7
    add     u8,10924
    add     u8,-42            
    loop    :loop

    syscall $LOCAL_GETTIME

    call    :calcTime       # Calculate time difference
    
    mov     u0,TIMES
    mul     u0,8            # We did 8 * 8 = 64 opcodes on each loop
    mov     f0,u0           # Convert to float
    div     f0,f1           # Calculate opcodes / second

    syscall $IO_PUTFLOAT

    mov     u0,:sNL
    mov     u1,^sNL
    syscall $IO_PUTSTRING
 
    mov     u0,:sSubtractions
    mov     u1,^sSubtractions
    syscall $IO_PUTSTRING
    
    mov     s0,TIMES        # Initialize loop  counter
    div     s0,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                            # (divide here to cut the running time a bit)
    sub     s0,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u4,u0           # Save the seconds
    mov     u5,u1           # Save the microseconds
    
:loop2
    sub     u0,128
    sub     u1,-787331
    sub     u0,u1
    sub     u1,u1
    sub     u9,1241233
    sub     u8,u1
    sub     u9,u8
    sub     u9,-8843
    sub     u8,u9
    sub     u7,u2
    sub     u7,u1
    sub     u0,-1
    sub     u0,u3
    sub     u9,u7
    sub     u8,1924
    sub     u8,-42            
    sub     u0,128
    sub     u1,-787331
    sub     u0,u1
    sub     u1,u1
    sub     u9,1241233
    sub     u8,u1
    sub     u9,u8
    sub     u9,-8843
    sub     u8,u9
    sub     u7,u2
    sub     u7,u1
    sub     u0,-1
    sub     u0,u3
    sub     u9,u7
    sub     u8,1924
    sub     u8,-42            
    sub     u0,128
    sub     u1,-787331
    sub     u0,u1
    sub     u1,u1
    sub     u9,1241233
    sub     u8,u1
    sub     u9,u8
    sub     u9,-8843
    sub     u8,u9
    sub     u7,u2
    sub     u7,u1
    sub     u0,-1
    sub     u0,u3
    sub     u9,u7
    sub     u8,1924
    sub     u8,-42            
    sub     u0,128
    sub     u1,-787331
    sub     u0,u1
    sub     u1,u1
    sub     u9,1241233
    sub     u8,u1
    sub     u9,u8
    sub     u9,-8843
    sub     u8,u9
    sub     u7,u2
    sub     u7,u1
    sub     u0,-1
    sub     u0,u3
    sub     u9,u7
    sub     u8,1924
    sub     u8,-42            
    loop    :loop2
    
    syscall $LOCAL_GETTIME
    
    call    :calcTime       # Calculate the time difference
    
    mov     u0,TIMES
    mul     u0,8            # We did 8 * 8 = 64 opcodes on each loop
    mov     f0,u0           # Convert to float
    div     f0,f1           # Calculate opcodes / second

    syscall $IO_PUTFLOAT

    mov     u0,:sNL
    mov     u1,^sNL
    syscall $IO_PUTSTRING

    mov     u0,:sMultiplications
    mov     u1,^sMultiplications
    syscall $IO_PUTSTRING
    
    mov     s0,TIMES        # Initialize loop  counter
    div     s0,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                            # (divide here to cut the running time a bit)
    sub     s0,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u4,u0           # Save the seconds
    mov     u5,u1           # Save the microseconds
    
:loop3
    mul     u0,128
    mul     u1,-787331
    mul     u0,u1
    mul     u1,u1
    mul     u9,1241233
    mul     u8,u1
    mul     u9,u8
    mul     u9,-8843
    mul     u8,u9
    mul     u7,u2
    mul     u7,u1
    mul     u0,-1
    mul     u0,u3
    mul     u9,u7
    mul     u8,1924
    mul     u8,-42            
    mul     u0,128
    mul     u1,-787331
    mul     u0,u1
    mul     u1,u1
    mul     u9,1241233
    mul     u8,u1
    mul     u9,u8
    mul     u9,-8843
    mul     u8,u9
    mul     u7,u2
    mul     u7,u1
    mul     u0,-1
    mul     u0,u3
    mul     u9,u7
    mul     u8,1924
    mul     u8,-42            
    mul     u0,128
    mul     u1,-787331
    mul     u0,u1
    mul     u1,u1
    mul     u9,1241233
    mul     u8,u1
    mul     u9,u8
    mul     u9,-8843
    mul     u8,u9
    mul     u7,u2
    mul     u7,u1
    mul     u0,-1
    mul     u0,u3
    mul     u9,u7
    mul     u8,1924
    mul     u8,-42            
    mul     u0,128
    mul     u1,-787331
    mul     u0,u1
    mul     u1,u1
    mul     u9,1241233
    mul     u8,u1
    mul     u9,u8
    mul     u9,-8843
    mul     u8,u9
    mul     u7,u2
    mul     u7,u1
    mul     u0,-1
    mul     u0,u3
    mul     u9,u7
    mul     u8,1924
    mul     u8,-42            
    loop    :loop3
    
    syscall $LOCAL_GETTIME
    
    call    :calcTime       # Calculate the time difference
    
    mov     u0,TIMES
    mul     u0,8            # We did 8 * 8 = 64 opcodes on each loop
    mov     f0,u0           # Convert to float
    div     f0,f1           # Calculate opcodes / second

    syscall $IO_PUTFLOAT

    mov     u0,:sNL
    mov     u1,^sNL
    syscall $IO_PUTSTRING

    mov     u0,:sDivisions
    mov     u1,^sDivisions
    syscall $IO_PUTSTRING
    
    mov     s0,TIMES        # Initialize loop  counter
    div     s0,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                            # (divide here to cut the running time a bit)
    sub     s0,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u4,u0           # Save the seconds
    mov     u5,u1           # Save the microseconds
    
:loop4
    div     u0,128
    div     u1,-787331
    div     u9,1241233
    div     u9,-8843
    div     u0,-1
    div     u8,1924
    div     u8,-42 
    div     u7,36           
    div     u0,128
    div     u1,-787331
    div     u9,1241233
    div     u9,-8843
    div     u0,-1
    div     u8,1924
    div     u8,-42 
    div     u7,36           
    div     u0,128
    div     u1,-78731
    div     u9,12431233
    div     u9,-8843
    div     u0,-1
    div     u8,1924
    div     u8,-42 
    div     u7,36           
    div     u0,128
    div     u1,-7287331
    div     u9,12233
    div     u9,-8843
    div     u0,-1
    div     u8,1924
    div     u8,-42 
    div     u7,36           
    div     u0,128
    div     u1,-731
    div     u9,1233
    div     u9,-8243
    div     u0,-11
    div     u8,1924
    div     u8,-42 
    div     u7,363           
    div     u0,128
    div     u1,-7833
    div     u9,1243
    div     u9,-8843
    div     u0,-1
    div     u8,1924
    div     u8,-42 
    div     u7,36           
    div     u0,128
    div     u1,-787331
    div     u9,1241233
    div     u9,-8843
    div     u0,-1
    div     u8,1924
    div     u8,-2 
    div     u7,3           
    div     u0,1228
    div     u1,-7331
    div     u9,41233
    div     u9,-8843
    div     u0,-21
    div     u8,19324
    div     u8,-42 
    div     u7,36           
    loop    :loop4
    
    syscall $LOCAL_GETTIME
    
    call    :calcTime       # Calculate the time difference
    
    mov     u0,TIMES
    mul     u0,8            # We did 8 * 8 = 64 opcodes on each loop
    mov     f0,u0           # Convert to float
    div     f0,f1           # Calculate opcodes / second

    syscall $IO_PUTFLOAT

    mov     u0,:sNL
    mov     u1,^sNL
    syscall $IO_PUTSTRING

    halt

:calcTime
    # Inputs:  u0 - seconds of first timevalue
    #          u1 - microseconds of first timevalue
    #          u4 - seconds of second timevalue
    #          u5 - microseconds of second timevalue
    # Outputs: f1 - difference between second timevalue and first in float format 
    
    sub     u0,u4           # Calculate seconds elapsed
    mov     u4,u0           # Save the result

    mov     s0,u1           # Convert microseconds to signed
    sub     s0,u5           # Calculate microsecond difference
    ifabo   s0,0            # Do we need to compensate?
    jmp     :skip

    sub     u4,1            # Subtract one second
    add     s0,1000000      # Compensate the microseconds
    mov     u5,s0           # Save the result

:skip
    mov     f1,u4           # Convert seconds to float
    mov     f2,u5           # Convert microseconds to float
    div     f2,1000000.0    # Recalculate microseconds to seconds
    add     f1,f2           # Add them together

    ret     0