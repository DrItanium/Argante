# Integer arithmetic benchmark
#
# This is a simple benchmarking program that tests the performance
# of various integer arithmetic opcodes. The following tests are
# performed:
#
# + Addition
# + Subtraction
# + Multiplication
# + Division

!SIGNATURE      "Integer arithmetic benchmark"
!PRIORITY       10000

.DATA

.define     TIMES   10000000 # Execute loop body this many times.

:sNL
    "\n"
:sAdditions
    "Additions / second: "
:sSubtractions
    "Subtractions / second: "
:sMultiplications
    "Multiplications / second: "
:sDivisions
    "Divisions / second: "
    
.CODE

    mov     u:r0,:sAdditions
    mov     u:r1,^sAdditions
    syscall $IO_PUTSTRING

    mov     s:r15,TIMES        # Initialize loop counter
    div     s:r15,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                            # (divide here to cut the running time a bit)
    sub     s:r15,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u:r10,u:r0           # Save the seconds
    mov     u:r11,u:r1           # Save the microseconds

:loop
    add     u:r0,125
    add     u:r1,-77331
    add     u:r0,u:r1
    add     u:r1,u:r1
    add     u:r9,12441233
    add     u:r8,u:r1
    add     u:r9,u:r8
    add     u:r9,-8843
    add     u:r8,u:r9
    add     u:r7,u:r1
    add     u:r7,u:r2
    add     u:r0,-1
    add     u:r0,u:r3
    add     u:r9,u:r7
    add     u:r8,10924
    add     u:r8,-42            
    add     u:r0,125
    add     u:r1,-77331
    add     u:r0,u:r1
    add     u:r1,u:r1
    add     u:r9,12441233
    add     u:r8,u:r1
    add     u:r9,u:r8
    add     u:r9,-8843
    add     u:r8,u:r9
    add     u:r7,u:r1
    add     u:r7,u:r2
    add     u:r0,-1
    add     u:r0,u:r3
    add     u:r9,u:r7
    add     u:r8,10924
    add     u:r8,-42            
    add     u:r0,125
    add     u:r1,-77331
    add     u:r0,u:r1
    add     u:r1,u:r1
    add     u:r9,12441233
    add     u:r8,u:r1
    add     u:r9,u:r8
    add     u:r9,-8843
    add     u:r8,u:r9
    add     u:r7,u:r1
    add     u:r7,u:r2
    add     u:r0,-1
    add     u:r0,u:r3
    add     u:r9,u:r7
    add     u:r8,10924
    add     u:r8,-42            
    add     u:r0,125
    add     u:r1,-77331
    add     u:r0,u:r1
    add     u:r1,u:r1
    add     u:r9,12441233
    add     u:r8,u:r1
    add     u:r9,u:r8
    add     u:r9,-8843
    add     u:r8,u:r9
    add     u:r7,u:r1
    add     u:r7,u:r2
    add     u:r0,-1
    add     u:r0,u:r3
    add     u:r9,u:r7
    add     u:r8,10924
    add     u:r8,-42            
    loop    s:r15, :loop
:calc
    call    :calcTime       # Calculate time difference
    
    mov     f:r15,TIMES
    mul     f:r15,8              # We did 8 * 8 = 64 opcodes on each loop
    div     f:r15,f:r0           # Calculate opcodes / second

    syscall2 $IO_PUTFLOAT, f:r15

    mov     u:r0,:sNL
    mov     u:r1,^sNL
    syscall $IO_PUTSTRING
 
    mov     u:r0,:sSubtractions
    mov     u:r1,^sSubtractions
    syscall $IO_PUTSTRING
    
    mov     s:r15,TIMES        # Initialize loop  counter
    div     s:r15,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                               # (divide here to cut the running time a bit)
    sub     s:r15,1             # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u:r10,u:r0           # Save the seconds
    mov     u:r11,u:r1           # Save the microseconds
    
:loop2
    sub     u:r0,128
    sub     u:r1,-787331
    sub     u:r0,u:r1
    sub     u:r1,u:r1
    sub     u:r9,1241233
    sub     u:r8,u:r1
    sub     u:r9,u:r8
    sub     u:r9,-8843
    sub     u:r8,u:r9
    sub     u:r7,u:r2
    sub     u:r7,u:r1
    sub     u:r0,-1
    sub     u:r0,u:r3
    sub     u:r9,u:r7
    sub     u:r8,1924
    sub     u:r8,-42            
    sub     u:r0,128
    sub     u:r1,-787331
    sub     u:r0,u:r1
    sub     u:r1,u:r1
    sub     u:r9,1241233
    sub     u:r8,u:r1
    sub     u:r9,u:r8
    sub     u:r9,-8843
    sub     u:r8,u:r9
    sub     u:r7,u:r2
    sub     u:r7,u:r1
    sub     u:r0,-1
    sub     u:r0,u:r3
    sub     u:r9,u:r7
    sub     u:r8,1924
    sub     u:r8,-42            
    sub     u:r0,128
    sub     u:r1,-787331
    sub     u:r0,u:r1
    sub     u:r1,u:r1
    sub     u:r9,1241233
    sub     u:r8,u:r1
    sub     u:r9,u:r8
    sub     u:r9,-8843
    sub     u:r8,u:r9
    sub     u:r7,u:r2
    sub     u:r7,u:r1
    sub     u:r0,-1
    sub     u:r0,u:r3
    sub     u:r9,u:r7
    sub     u:r8,1924
    sub     u:r8,-42            
    sub     u:r0,128
    sub     u:r1,-787331
    sub     u:r0,u:r1
    sub     u:r1,u:r1
    sub     u:r9,1241233
    sub     u:r8,u:r1
    sub     u:r9,u:r8
    sub     u:r9,-8843
    sub     u:r8,u:r9
    sub     u:r7,u:r2
    sub     u:r7,u:r1
    sub     u:r0,-1
    sub     u:r0,u:r3
    sub     u:r9,u:r7
    sub     u:r8,1924
    sub     u:r8,-42            
    loop    s:r15, :loop2
:calc2
    call    :calcTime       # Calculate the time difference
    
    mov     f:r15,TIMES
    mul     f:r15,8              # We did 8 * 8 = 64 opcodes on each loop
    div     f:r15,f:r0           # Calculate opcodes / second

    syscall2 $IO_PUTFLOAT, f:r15

    mov     u:r0,:sNL
    mov     u:r1,^sNL
    syscall $IO_PUTSTRING

    mov     u:r0,:sMultiplications
    mov     u:r1,^sMultiplications
    syscall $IO_PUTSTRING
    
    mov     s:r15,TIMES        # Initialize loop  counter
    div     s:r15,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                            # (divide here to cut the running time a bit)
    sub     s:r15,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u:r10,u:r0           # Save the seconds
    mov     u:r11,u:r1           # Save the microseconds
    
:loop3
    mul     u:r0,128
    mul     u:r1,-787331
    mul     u:r0,u:r1
    mul     u:r1,u:r1
    mul     u:r9,1241233
    mul     u:r8,u:r1
    mul     u:r9,u:r8
    mul     u:r9,-8843
    mul     u:r8,u:r9
    mul     u:r7,u:r2
    mul     u:r7,u:r1
    mul     u:r0,-1
    mul     u:r0,u:r3
    mul     u:r9,u:r7
    mul     u:r8,1924
    mul     u:r8,-42            
    mul     u:r0,128
    mul     u:r1,-787331
    mul     u:r0,u:r1
    mul     u:r1,u:r1
    mul     u:r9,1241233
    mul     u:r8,u:r1
    mul     u:r9,u:r8
    mul     u:r9,-8843
    mul     u:r8,u:r9
    mul     u:r7,u:r2
    mul     u:r7,u:r1
    mul     u:r0,-1
    mul     u:r0,u:r3
    mul     u:r9,u:r7
    mul     u:r8,1924
    mul     u:r8,-42            
    mul     u:r0,128
    mul     u:r1,-787331
    mul     u:r0,u:r1
    mul     u:r1,u:r1
    mul     u:r9,1241233
    mul     u:r8,u:r1
    mul     u:r9,u:r8
    mul     u:r9,-8843
    mul     u:r8,u:r9
    mul     u:r7,u:r2
    mul     u:r7,u:r1
    mul     u:r0,-1
    mul     u:r0,u:r3
    mul     u:r9,u:r7
    mul     u:r8,1924
    mul     u:r8,-42            
    mul     u:r0,128
    mul     u:r1,-787331
    mul     u:r0,u:r1
    mul     u:r1,u:r1
    mul     u:r9,1241233
    mul     u:r8,u:r1
    mul     u:r9,u:r8
    mul     u:r9,-8843
    mul     u:r8,u:r9
    mul     u:r7,u:r2
    mul     u:r7,u:r1
    mul     u:r0,-1
    mul     u:r0,u:r3
    mul     u:r9,u:r7
    mul     u:r8,1924
    mul     u:r8,-42            
    loop    s:r15, :loop3
:calc3
    call    :calcTime       # Calculate the time difference
    
    mov     f:r15,TIMES
    mul     f:r15,8              # We did 8 * 8 = 64 opcodes on each loop
    div     f:r15,f:r0           # Calculate opcodes / second

    syscall2 $IO_PUTFLOAT, f:r15

    mov     u:r0,:sNL
    mov     u:r1,^sNL
    syscall $IO_PUTSTRING

    mov     u:r0,:sDivisions
    mov     u:r1,^sDivisions
    syscall $IO_PUTSTRING
    
    mov     s:r15,TIMES        # Initialize loop  counter
    div     s:r15,8            # We're going to do 8 * 8 = 64 opcodes on each loop
                               # (divide here to cut the running time a bit)
    sub     s:r15,1            # Compensate
    
    syscall $LOCAL_GETTIME
    mov     u:r10,u:r0           # Save the seconds
    mov     u:r11,u:r1           # Save the microseconds
    
:loop4
    div     u:r0,128
    div     u:r1,-787331
    div     u:r9,1241233
    div     u:r9,-8843
    div     u:r0,-1
    div     u:r8,1924
    div     u:r8,-42 
    div     u:r7,36           
    div     u:r0,128
    div     u:r1,-787331
    div     u:r9,1241233
    div     u:r9,-8843
    div     u:r0,-1
    div     u:r8,1924
    div     u:r8,-42 
    div     u:r7,36           
    div     u:r0,128
    div     u:r1,-78731
    div     u:r9,12431233
    div     u:r9,-8843
    div     u:r0,-1
    div     u:r8,1924
    div     u:r8,-42 
    div     u:r7,36           
    div     u:r0,128
    div     u:r1,-7287331
    div     u:r9,12233
    div     u:r9,-8843
    div     u:r0,-1
    div     u:r8,1924
    div     u:r8,-42 
    div     u:r7,36           
    div     u:r0,128
    div     u:r1,-731
    div     u:r9,1233
    div     u:r9,-8243
    div     u:r0,-11
    div     u:r8,1924
    div     u:r8,-42 
    div     u:r7,363           
    div     u:r0,128
    div     u:r1,-7833
    div     u:r9,1243
    div     u:r9,-8843
    div     u:r0,-1
    div     u:r8,1924
    div     u:r8,-42 
    div     u:r7,36           
    div     u:r0,128
    div     u:r1,-787331
    div     u:r9,1241233
    div     u:r9,-8843
    div     u:r0,-1
    div     u:r8,1924
    div     u:r8,-2 
    div     u:r7,3           
    div     u:r0,1228
    div     u:r1,-7331
    div     u:r9,41233
    div     u:r9,-8843
    div     u:r0,-21
    div     u:r8,19324
    div     u:r8,-42 
    div     u:r7,36           
    loop    s:r15,:loop4
:calc4
    call    :calcTime       # Calculate the time difference
    
    mov     f:r15,TIMES
    mul     f:r15,8              # We did 8 * 8 = 64 opcodes on each loop
    div     f:r15,f:r0           # Calculate opcodes / second

    syscall2 $IO_PUTFLOAT, f:r15

    mov     u:r0,:sNL
    mov     u:r1,^sNL
    syscall $IO_PUTSTRING

    halt

:calcTime
    # Mangles: r0, r1
    # Inputs:  r10 - seconds of second timevalue
    #          r11 - microseconds of second timevalue
    # Outputs: f:r0 - difference between second timevalue and first in float format 
    
    syscall $LOCAL_GETTIME
    sub     u:r0,u:r10          # Calculate seconds elapsed
    sub     s:r1,u:r11          # Calculate microsecond difference
    ifabo   s:r1,0              # Do we need to compensate?
    jmp     :skip

    sub     u:r0,1              # Subtract one second
    add     s:r1,1000000        # Compensate the microseconds

:skip
    mov     f:r0,u:r0           # Convert seconds to float
    mov     f:r1,u:r1           # Convert microseconds to float
    div     f:r1,f:1000000.0    # Recalculate microseconds to seconds
    add     f:r0,f:r1           # Add them together

    ret     0
