  In the current implementation modules are dynamically linked programs 
  written in C or ADA.

  Requirements are as follows:

  - there must be syscall_load(int* x); this function is called when the module
    is loaded; its duty is to fill the table of x values with syscall numbers
    it will support; the values of these syscalls are to be found in the
    syscall.h file (of course, new functions should have new ones, added to
    syscall.h). The list cannot exceed MAX_SERVE from the file config.h and
    must end with a negative value.

  - another function required is syscall_handler(int c,int sysnum) - it will be
    called if VCPU with the number 'c' calls syscall with the number found
    in the list registered for this module (the actual number is given in
    sysnum). The value 'c' permits referring to the structure vcpu_struct
    declared in task.h (see this file for details).

  - optionally, there could be syscall_unload, executed when syscall terminates

  - optionally, there could be syscall_task_cleanup, executed whenever any task
    terminates (removing open descriptors etc.).

  I could go on with describing module construction, so I will just paste
  a sample one, supporting primitive console output:

  --
  void syscall_load(int* x) {
    *x=SYSCALL_IO_PUTSTRING;
    *(++x)=SYSCALL_ENDLIST;
    printk("<< Welcome to I/O module >>\n");
  }

  void syscall_handler(int c,int num) {

    int cnt;
    int from;
    char* start;

    if (num==1) {
      from=cpu[c].uregs[0];
      cnt=cpu[c].uregs[1];
      start=verify_access(c,from,(cnt+3)/4,MEM_FLAG_READ);
      if (!start) {
        non_fatal(ERROR_PROTFAULT,"Can't print non-accessible memory",c);
        return;
      }
      write(2,start,cnt);
    }

  }

  Function non_fatal is used for reporting exceptions.

  Library exchange consists in loading a new one into any free slot, and the
  unloading the old one from its slot. Syscall management will be uninterrupted.

  And no, syscalls CANNOT block the system, exactly as it is e.g. in Linux.
  Therefore, when it is necessary to wait for an operation (like recv()),
  it is recommended to set process state (cpu[nn].state) adding the flag
  VCPU_STATE_IOWAIT and at the same time setting cpu[nn].iohandler so that it
  points to the function accepting a single parameter (the number of the VCPU):
  int handler(int cpu_num).

  Additionally, the field cpu[nn].iowait_id could be used to define the
  identifier of the resource the process is waiting for.You could use it, but
  don't have to.

  >From this point on, the process won't work (the situation is analogous to
  STATE_SLEEP). Instead, in every cycle of serving tasks, the function
  iohandler(numer_cpu) will be called. The function should check the number
  of the resource the task is waiting for. If it is not accessible, it should
  return 0. If it is accessible, the function should manage the results
  appropriately and return a non-zero value (e.g. 1) to automatically leave
  the state IOWAIT.

  A given module should itself take care of storing information concerning
  where to write return information for a given task, etc.

  To enter the IOWAIT state, the safest way is to use the macro:

  ENTER_IOWAIT(cpu_number,resource_number,iohandler)

  You should remember not to pass nor take from the process "raw" objects
  from the real system, like file descriptor numbers, nor to leave access
  control to the system (e.g. attempting writing to a file and then checking
  for success). Argante ensures full control on its own side in a unified way,
  whereas all "real" objects are stored in tables separate for every processor,
  giving the process at most an identifier within these tables. The best
  example of a correct module construction is the fs module.


  This is a short description of string management philosophy at a low level
  (which will probably be of no interest to an AHLL programmer, but is essential
  when creating modules), which I wrote for Artur:

  [...]

  Oh, but gethostbyname is a rather good example. In general we do it in
  this way:

  - user passes us buffer address and its size (in, say, registers u0 i u1).

  - we check whether the user is authorised to perform a given operation -
    in your case it is sufficient to use the macro VALIDATE(c,"none",
    "local/sys/real/uname/get"); the macro will "return" itself if the
    user isn't authorised to access the object.

  - You have to check whether the address given by the user is writable
    at all its length: if not, naturally we cannot process its syscall and
    report an exception:


    if (!(sth=verify_access(c,cpu[c].uregs[0],(cpu[c].uregs[1]+3)/4,
          MEM_FLAG_WRITE))) {
      non_fatal(ERROR_PROTFAULT,"gethostname: Attempt to access protected"
                                " memory",c);
      failure=1;
      return;
    }

    verify_access accepts the following parameters: VCPU number, address,
    size (but note it is in dwords, so we have to recalculate the size given
    in bytes; as the operator '/' in c on ints is simply idiv ignoring
    the modulo, we make sure we catch a case like: the user says we can
    write one byte, 1/4 according idiv = 0, so we check 0 bytes ;-), or
    as well as access type (READ or WRITE).

    The function returns either a pointer (already in the real system,
    normal void*) or NULL: it means it is not authorised to access the block
    and we should raise an exception, set failure (a convention, for my
    own comfort, it was justified somehow ;) and stop any further work.

  - OK, success, let's assume we have the pointer already, so we take what
    we need, write max.uregs[1] bytes to the address returned by verify_access,
    and the we return (say in s0) the number of characters taken.

    NOTE: we don't copy nor count the NULL-terminator which is a normal sign
    in Argante. Therefore we don't do things like:

    strncpy(sth,some_buffer,cpu[c].uregs[1]);

    but instead:

    memcpy(sth,some_buffer,strlen(some_buffer))

    and we return strlen(some_buffer) w s0. Oh, but we have to check earlier
    whether strlen(some_buffer)>cpu[c].uregs[1] (i.e. whether we wan to write
    more than is needed) and possibly we should report an exception.

  That's enough about strings from the point of view of kernel-space.
  No, there are no plans for strings hard-linked to byte/word/dword
  referring to their length: it will be a matter of taste and implementation
  in HLL, but the information is passed to the kernel loosely :P

  More trouble with strings has only poor z33d who has to introduce a new
  value for certain operations ;) i.e. either to return the offset in bytes
  or the address argante + 0..3 of the offset ;> But it's not a big problem,
  either.

  [ z33d was writing the module advmem, responsible for, among others,
  concatenating / searching texts, etc]



