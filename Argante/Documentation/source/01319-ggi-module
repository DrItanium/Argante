
  Introduction
  ------------

  The GGI module basically wraps each GGI function with a corresponding
  syscall. This documentation is only a quick reference regarding the
  syscalls; you should read the GGI documentation for information on
  how the corresponding functions work and how to use them.

  Structures
  ----------

  Several syscalls take pointers to structures. Their memory layout is
  identical to the real GGI structures; they are simply passed along
  directly. Because of this, you must take care when you fill them out
  correctly. Take the following example:

  typedef struct {
          uint8   size;           /* size of event in bytes       */
          uint8   type;           /* type of this event           */
          sint16  error;          /* error (for replies)          */
          uint32  origin;         /* origin device (etc)          */
          uint32  target;         /* target device (etc)          */
          struct  timeval time    /* timestamp                    */
  } ggi_any_event;

  This structure is 5 dwords long. The first dword contains the fields
  "size" (first byte), "type" (second byte) and "error" (bytes 3-4).
  The second and third dwords contain "origin" and "target"
  respectively, and "time" takes the last two dwords (it contains two
  32bit values). This might be a bit of a hassle in RSIS assembler.

  Exceptions
  ----------

  The following exceptions are specific to this module:
  + GGI_INVALID_VISUAL (no such visual)
  + GGI_OPEN           (could not open visual)
  + GGI_CONTROL        (generic control function failure)
  + GGI_OUTPUT         (generic output function failure)
  + GGI_INPUT          (generic inpput function failure)

  Syscalls
  --------

  Name:       GGI_OPEN
  Inputs:     u1 - name (strptr)
              u2 - name length
  Outputs:    u0 - visual ID
  Result:     Opens the specified visual. If a visual with such name
              already exists, no new visual will be opened. Instead,
              the existing visual's open count will be incremented and
              it's ID returned. This allows several processes to share
              a visual.
  Note:       The returned ID is NOT a real ggi_visual_t. Also, the
              name IS NOT passed to ggiOpen. Both these are only used
              internally by the module.
  Exceptions: GGI_OPEN (could not open specified visual)
  HAC:        ggi/control/open
  _____________________________________________________________________

  Name:       GGI_CLOSE
  Inputs:     u0 - visual ID
  Outputs:    s0 - error code (or 0 for success)
  Result:     Decrements the specified visual's open count; and if it
              becomes zero, the visual is closed.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
  HAC:        ggi/control/close
  _____________________________________________________________________

  Name:       GGI_SETFLAGS
  Inputs:     u0 - visual ID
              u1 - flags
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the specified flags for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/flags
  _____________________________________________________________________

  Name:       GGI_GETFLAGS
  Inputs:     u0 - visual ID
  Ouputs:     u1 - flags
  Result:     Returns the flags that are set for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/flags
  _____________________________________________________________________

  Name:       GGI_ADDFLAGS
  Inputs:     u0 - visual ID
              u1 - flags
  Outputs:    s0 - error code (or 0 for success)
  Result:     Adds the specified flags to the current flags for the
              visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/flags
              ggi/control/set/flags
  _____________________________________________________________________

  Name:       GGI_REMOVEFLAGS
  Inputs:     u0 - visual ID
              u1 - flags
  Outputs:    s0 - error code (or 0 for success)
  Result:     Removes the specified flags from the current flags for
              the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/flags
              ggi/control/set/flags
  _____________________________________________________________________

  Name:       GGI_SETMODE
  Inputs:     u0 - visual ID
              u1 - pointer to a ggi_mode structure
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the mode for the visual.
  Note:       The buffer u1 points to must be atleast sizeof(ggi_mode)
              bytes long, and must allow both reading and writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/set/mode
  _____________________________________________________________________

  Name:       GGI_GETMODE
  Inputs:     u0 - visual ID
              u1 - pointer to a ggi_mode structure
  Outputs:    s0 - error code (or 0 for success)
  Result:     Gets the current mode for the visual.
  Note:       The buffer u1 points to must be atleast sizeof(ggi_mode)
              bytes long, and must allow writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/get/mode
  _____________________________________________________________________

  Name:       GGI_CHECKMODE
  Inputs:     u0 - visual ID
              u1 - pointer to a ggi_mode structure
  Outputs:    s0 - status code (0 for ok, not 0 otherwise)
  Result:     Checks if the mode will work on the visual.
  Note:       The buffer u1 points to must be atleast sizeof(ggi_mode)
              bytes long, and must allow both reading and writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              PROTFAULT (protection fault)
  HAC:        ggi/control/check/mode
  _____________________________________________________________________

  Name:       GGI_SETSIMPLEMODE
  Inputs:     u0 - visual ID
              u1 - width
              u2 - height
              u3 - number of frames
              u4 - graphtype
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the mode for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/mode
  _____________________________________________________________________

  Name:       GGI_CHECKSIMPLEMODE
  Inputs:     u0 - visual ID
              u1 - width
              u2 - height
              u3 - number of frames
              u4 - graphtype
              u5 - pointer to ggi_mode structure (or NULL)
  Outputs:    s0 - status code (0 for ok, not 0 otherwise)
  Result:     Checks if the mode will work on the visual.
  Note:       If u5 is not NULL, the buffer it points to must be at
              least sizeof(ggi_mode) bytes long and allow writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              PROTFAULT (protection fault)
  HAC:        ggi/control/check/mode
  _____________________________________________________________________

  Name:       GGI_SETGRAPHMODE
  Inputs:     u0 - visual ID
              u1 - width
              u2 - height
              u3 - virtual width
              u4 - virtual height
              u5 - graphtype
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the mode for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/mode
  _____________________________________________________________________

  Name:       GGI_CHECKGRAPHMODE
  Inputs:     u0 - visual ID
              u1 - width
              u2 - height
              u3 - virtual width
              u4 - virtual height
              u5 - graphtype
              u6 - pointer to ggi_mode structure (or NULL)
  Outputs:    s0 - status code (0 for ok, not 0 otherwise)
  Result:     Checks if the mode will work on the visual.
  Note:       If u6 is not NULL, the buffer it points to must be at
              least sizeof(ggi_mode) bytes long and allow writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              PROTFAULT (protection fault)
  HAC:        ggi/control/check/mode
  _____________________________________________________________________

  Name:       GGI_SETTEXTMODE
  Inputs:     u0 - visual ID
              u1 - cols
              u2 - rows
              u3 - virtual cols
              u4 - virtual rows
              u5 - fontx
              u6 - fonty
              u7 - graphtype
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the mode for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/mode
  _____________________________________________________________________

  Name:       GGI_CHECKTEXTMODE
  Inputs:     u0 - visual ID
              u1 - cols
              u2 - rows
              u3 - virtual cols
              u4 - virtual rows
              u5 - fontx
              u6 - fonty
              u7 - graphtype
              u8 - pointer to ggi_mode structure (or NULL)
  Outputs:    s0 - status code (0 for ok, not 0 otherwise)
  Result:     Checks if the mode will work on the visual.
  Note:       If u8 is not NULL, the buffer it points to must be at
              least sizeof(ggi_mode) bytes long and allow writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              PROTFAULT (protection fault)
  HAC:        ggi/control/check/mode
  _____________________________________________________________________

  Name:       GGI_SETORIGIN
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the top-left corner of the displayed area to (s1,s2).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/origin
  _____________________________________________________________________

  Name:       GGI_GETORIGIN
  Inputs:     u0 - visual ID
  Outputs:    s1 - x
              s2 - y
              s0 - error code (or 0 for success)
  Result:     Gets the current top-left corner of the displayed area.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/origin
  _____________________________________________________________________

  Name:       GGI_SETDISPLAYFRAME
  Inputs:     u0 - visual ID
              u1 - frame number
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the frame that gets displayed.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/frame/display
  _____________________________________________________________________

  Name:       GGI_GETDISPLAYFRAME
  Inputs:     u0 - visual ID
  Outputs:    u1 - frame number
  Result:     Returns the frame currently displayed.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/frame/display
  _____________________________________________________________________

  Name:       GGI_SETREADFRAME
  Inputs:     u0 - visual ID
              u1 - frame number
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the frame for read operations.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/frame/read
  _____________________________________________________________________

  Name:       GGI_GETREADFRAME
  Inputs:     u0 - visual ID
  Outputs:    u1 - frame number
  Result:     Returns the frame currently used for read operations.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/frame/read
  _____________________________________________________________________

  Name:       GGI_SETWRITEFRAME
  Inputs:     u0 - visual ID
              u1 - frame number
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the frame for write operations.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/frame/write
  _____________________________________________________________________

  Name:       GGI_GETWRITEFRAME
  Inputs:     u0 - visual ID
  Outputs:    u1 - frame number
  Result:     Returns the frame currently used for write operations.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/frame/write
  _____________________________________________________________________

  Name:       GGI_SETPALETTE
  Inputs:     u0 - visual ID
              u1 - pointer to array of ggi_color
              u2 - length of array
              u3 - start index
  Outputs:    s0 - first entry changed if negative, else error code
  Result:     Sets the palette for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/set/palette
  _____________________________________________________________________

  Name:       GGI_GETPALETTE
  Inputs:     u0 - visual ID
              u1 - pointer to array of ggi_color
              u2 - length of array
              u3 - start index
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the palette for the visual.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/get/palette
  _____________________________________________________________________

  Name:       GGI_SETCOLORFULPALETTE
  Inputs:     u0 - visual ID
  Outputs:    s0 - first palette entry changed, error code if negative.
  Result:     Sets a default palette with a full range of colors.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/palette
  _____________________________________________________________________

  Name:       GGI_SETGAMMA
  Inputs:     u0 - visual ID
              f0 - red component
              f1 - green component
              f2 - blue component
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the gamma correction.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/gamma
  _____________________________________________________________________

  Name:       GGI_GETGAMMA
  Inputs:     u0 - visual ID
  Outputs:    f0 - red component
              f1 - green component
              f2 - blue component
              s0 - error code (or 0 for success)
  Result:     Gets the gamma correction.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/gamma
  _____________________________________________________________________

  Name:       GGI_SETGAMMAMAP
  Inputs:     u0 - visual ID
              u1 - pointer to array of ggi_color
              u2 - length of array
              u3 - start index
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the visual's gamma map.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/set/gamma
  _____________________________________________________________________

  Name:       GGI_GETGAMMAMAP
  Inputs:     u0 - visual ID
              u1 - pointer to array of ggi_color
              u2 - length of array
              u3 - start index
  Outputs:    s0 - error code (or 0 for success)
  Result:     Gets the visual's gamma map.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/get/gamma
  _____________________________________________________________________

  Name:       GGI_SETGCFOREGROUND
  Inputs:     u0 - visual ID
              u1 - pixel value
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the graphic context's foreground color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/gc/foreground
  _____________________________________________________________________

  Name:       GGI_GETGCFOREGROUND
  Inputs:     u0 - visual ID
  Outputs:    u1 - pixel value
              s0 - error code (or 0 for success)
  Result:     Gets the graphic context's current foreground color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/gc/foreground
  _____________________________________________________________________

  Name:       GGI_SETGCBACKGROUND
  Inputs:     u0 - visual ID
              u1 - pixel value
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the graphic context's background color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/gc/background
  _____________________________________________________________________

  Name:       GGI_GETGCBACKGROUND
  Inputs:     u0 - visual ID
  Outputs:    u1 - pixel value
              s0 - error code (or 0 for success)
  Result:     Gets the graphic context's current background color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/gc/background
  _____________________________________________________________________

  Name:       GGI_SETGCCLIPPING
  Inputs:     u0 - visual ID
              s1 - left
              s2 - top
              s3 - right
              s4 - bottom
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the current clipping rectangle.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/set/gc/clipping
  _____________________________________________________________________

  Name:       GGI_GETGCCLIPPING
  Inputs:     u0 - visual ID
  Outputs:    s1 - left
              s2 - top
              s3 - right
              s4 - bottom
              s0 - error code (or 0 for success)
  Result:     Gets the current clipping rectangle.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/get/gc/clipping
  _____________________________________________________________________

  Name:       GGI_FLUSH
  Inputs:     u0 - visual ID
  Outputs:    -
  Result:     Flushes pending drawing commands.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
  HAC:        ggi/control/flush/screen
  _____________________________________________________________________

  Name:       GGI_FLUSHREGION
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              s4 - height
  Outputs:    -
  Result:     Flushes pending drawing commands that affect the
              specified region (if it would improve performance).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
  HAC:        ggi/control/flush/region
  _____________________________________________________________________

  Name:       GGI_MAPCOLOR
  Inputs:     u0 - visual ID
              u1 - red component
              u2 - green component
              u3 - blue component
              u4 - alpha component
  Outputs:    u1 - pixel value
  Result:     Returns the pixel value for the given color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
  HAC:        ggi/control/map/color
  _____________________________________________________________________

  Name:       GGI_UNMAPPIXEL
  Inputs:     u0 - visual ID
              u1 - pixel value
  Outputs:    u1 - red component
              u2 - green component
              u3 - blue component
              u4 - alpha component
              s0 - error code (or 0 for success)
  Result:     Returns the color associated with the given pixel value.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
  HAC:        ggi/control/map/pixel
  _____________________________________________________________________

  Name:       GGI_PACKCOLORS
  Inputs:     u0 - visual ID
              u1 - pointer to array of pixel values (dwords)
              u2 - pointer to array of ggi_color
              u3 - length of arrays (both must be the same length)
  Outputs:    s0 - error code (or 0 for success)
  Result:     Converts the colors to pixel values.
  Note:       The array of pixel values must writable and the array
              of ggi_color must be readable. Both must be large enough.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/map/colors
  _____________________________________________________________________

  Name:       GGI_UNPACKPIXELS
  Inputs:     u0 - visual ID
              u1 - pointer to array of pixel values (dwords)
              u2 - pointer to array of ggi_color
              u3 - length of arrays (both must be the same length)
  Outputs:    s0 - error code (or 0 for success)
  Result:     Converts the pixel values to colors
  Note:       The array of pixel values must readable and the array
              of ggi_color must be writable. Both must be large enough.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_CONTROL (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/control/map/pixels
  _____________________________________________________________________

  Name:       GGI_FILLSCREEN
  Inputs:     u0 - visual ID
  Outputs:    s0 - error code (or 0 for success)
  Result:     Fills the whole screen with the current foreground color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/fillscreen
  _____________________________________________________________________

  Name:       GGI_PUTPIXEL
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              u1 - pixel value
  Outputs:    s0 - error code (or 0 for success)
  Result:     Puts a single pixel value at (s1,s2).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/put/pixel
  _____________________________________________________________________

  Name:       GGI_GETPIXEL
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
  Outputs:    u1 - pixel value
              s0 - error code (or 0 for success)
  Result:     Gets a single pixel value from (s1,s2).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/get/pixel
  _____________________________________________________________________

  Name:       GGI_DRAWPIXEL
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
  Outputs:    s0 - error code (or 0 for success)
  Result:     Draws a single pixel at (s1,s2) using the current
              foreground color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/draw/pixel
  _____________________________________________________________________

  Name:       GGI_PUTHLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              u1 - pointer to buffer
  Outputs:    s0 - error code (or 0 for success)
  Result:     Puts a horizontal line from (s1,s2) extending s3 pixels
              in the positive x direction, with the height of 1 pixel.
              The pixel values are taken from the specified buffer.
  Note:       The buffer must be at least s3 dwords long.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/put/hline
  _____________________________________________________________________

  Name:       GGI_GETHLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              u1 - pointer to buffer
  Outputs:    s0 - error code (or 0 for success)
  Result:     Gets a horizontal line from (s1,s2) extending s3 pixels
              in the positive x direction, with the height of 1 pixel.
              The pixel values are stored in the specified buffer.
  Note:       The buffer must be at least s3 dwords long.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/get/hline
  _____________________________________________________________________

  Name:       GGI_DRAWHLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
  Outputs:    s0 - error code (or 0 for success)
  Result:     Draws a horizontal line in the current foreground color
              from (s1,s2) extending s3 pixel in the positive x
              direction, with the height of 1 pixel.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/draw/hline
  _____________________________________________________________________

  Name:       GGI_PUTVLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - height
              u1 - pointer to buffer
  Outputs:    s0 - error code (or 0 for success)
  Result:     Puts a vertical line from (s1,s2) extending s3 pixels
              in the positive y direction, with the width of 1 pixel.
              The pixel values are taken from the specified buffer.
  Note:       The buffer must be at least s3 dwords long.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/put/vline
  _____________________________________________________________________

  Name:       GGI_GETVLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - height
              u1 - pointer to buffer
  Outputs:    s0 - error code (or 0 for success)
  Result:     Gets a vertical line from (s1,s2) extending s3 pixels
              in the positive y direction, with the width of 1 pixel.
              The pixel values are stored in the specified buffer.
  Note:       The buffer must be at least s3 dwords long.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/get/vline
  _____________________________________________________________________

  Name:       GGI_DRAWVLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - height
  Outputs:    s0 - error code (or 0 for success)
  Result:     Draws a vertical line in the current foreground color
              from (s1,s2) extending s3 pixel in the positive y
              direction, with the width of 1 pixel.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/draw/vline
  _____________________________________________________________________

  Name:       GGI_DRAWLINE
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - xe
              s4 - ye
  Outputs:    s0 - error code (or 0 for success)
  Result:     Draws a line in the current foreground color from (s1,s2)
              to (s3,s4).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/draw/line
  _____________________________________________________________________

  Name:       GGI_PUTBOX
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              s4 - height
              u1 - pointer to buffer
  Outputs:    s0 - error code (or 0 for success)
  Result:     Puts a rectangle at (s1,s2) with the width of s3 and
              height of s4, taking the pixel values from the specified
              buffer.
  Note:       The buffer must be at least s3 * s4 dwords long.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/put/box
  _____________________________________________________________________

  Name:       GGI_GETBOX
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              s4 - height
              u1 - pointer to buffer
  Outputs:    s0 - error code (or 0 for success)
  Result:     Gets a rectangle at (s1,s2) with the width of s3 and
              height of s4, storing the pixel values in the specified
              buffer.
  Note:       The buffer must be at least s3 * s4 dwords long.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/get/box
  _____________________________________________________________________

  Name:       GGI_DRAWBOX
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              s4 - height
  Outputs:    s0 - error code (or 0 for success)
  Result:     Draws a rectangle at (s1,s2) with the width of s3 and
              height of s4, using the current foreground color.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/draw/box
  _____________________________________________________________________

  Name:       GGI_COPYBOX
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              s3 - width
              s4 - height
              s5 - new x
              s6 - new y
  Outputs:    s0 - error code (or 0 for success)
  Result:     Copies the contents of the rectange at (s1,s2) with the
              width s3 and height s4 to the new location (s5,s6).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/get/box
              ggi/output/put/box
  _____________________________________________________________________

  Name:       GGI_CROSSBLIT
  Inputs:     u0 - src visual ID
              s1 - src x
              s2 - src y
              s3 - src width
              s4 - src height
              u1 - dst visual ID
              s5 - dst x
              s6 - dst y
  Outputs:    s0 - error code (or 0 for success)
  Result:     Blits a rectangular area from one visual to another.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/get/box (object is src visual)
              ggi/output/put/box (object is dst visual)
  _____________________________________________________________________

  Name:       GGI_PUTC
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              u1 - character value
  Outputs:    s0 - error code (or 0 for success)
  Result:     Puts a single character at (s1,s2) using the current
              foreground color.
  Note:       This GGI function seems to be broken.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/put/char
  _____________________________________________________________________

  Name:       GGI_PUTS
  Inputs:     u0 - visual ID
              s1 - x
              s2 - y
              u1 - pointer to string
              u2 - string length
  Outputs:    s0 - error code (or 0 for success)
  Result:     Puts multiple characters at once, starting at (s1,s2).
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_OUTPUT (function failure)
  HAC:        ggi/output/put/string
  _____________________________________________________________________

  Name:       GGI_KBHIT
  Inputs:     u0 - visual ID
  Outputs:    s0 - status
  Result:     Checks if a key has been hit on the keyboard. If no key
              has been hit, 0 is returned and something else otherwise.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
  HAC:        ggi/input/kbhit
  _____________________________________________________________________

  Name:       GGI_GETC
  Inputs:     u0 - visual ID
  Outputs:    u1 - unicode character
  Result:     Gets a character from the keyboard. Blocks (puts the
              process in STATE_IOWAIT) if there is no immediate key
              available.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
  HAC:        ggi/input/get/char
  _____________________________________________________________________

  Name:       GGI_SETEVENTMASK
  Inputs:     u0 - visual ID
              u1 - event mask
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sets the current event mask.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
  HAC:        ggi/input/set/eventmask
  _____________________________________________________________________

  Name:       GGI_GETEVENTMASK
  Inputs:     u0 - visual ID
  Outputs:    u1 - event mask
  Result:     Gets the current event mask.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
  HAC:        ggi/input/get/eventmask
  _____________________________________________________________________

  Name:       GGI_ADDEVENTMASK
  Inputs:     u0 - visual ID
              u1 - event mask
  Outputs:    s0 - error code (or 0 for success)
  Result:     Adds the specified event mask to the current mask.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
  HAC:        ggi/input/get/eventmask
              ggi/input/set/eventmask
  _____________________________________________________________________

  Name:       GGI_REMOVEEVENTMASK
  Inputs:     u0 - visual ID
              u1 - event mask
  Outputs:    s0 - error code (or 0 for success)
  Result:     Removes the specified event mask from the current mask.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
  HAC:        ggi/input/get/eventmask
              ggi/input/set/eventmask
  _____________________________________________________________________

  Name:       GGI_EVENTSQUEUED
  Inputs:     u0 - visual ID
              u1 - event mask
  Outputs:    s0 - number of events
  Result:     Returns the number of available events.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
  HAC:        ggi/input/get/eventsqueued
  _____________________________________________________________________

  Name:       GGI_EVENTREAD
  Inputs:     u0 - visual ID
              u1 - event mask
              u2 - pointer to gii_event structure
  Outputs:    s0 - size of returned event (or 0 for error)
  Result:     Returns the oldest event that matches the event mask.
              If no such event is available, it will wait for one.
  Note:       The buffer u2 points to must be atleast sizeof(gii_event)
              bytes long and allow writing.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/input/get/event
  _____________________________________________________________________

  Name:       GGI_EVENTSEND
  Inputs:     u0 - visual ID
              u1 - pointer to gii_event structure
  Outputs:    s0 - error code (or 0 for success)
  Result:     Sends the specified event.
  Note:       The buffer u1 points to must be atleast sizeof(gii_event)
              bytes long and allow reading.
  Exceptions: GGI_INVALID_VISUAL (no such visual)
              GGI_INPUT (function failure)
              PROTFAULT (protection fault)
  HAC:        ggi/input/put/event
