-----------------------------------
Here are some Argante OS highligts:
-----------------------------------

This information is provided as an intellectual ammunition for Argante
advocacy, and isn't as useful as README.

* Argante provides low-level virtual machine with architecture-independent
  universal functionality, which is faster, more accurate and less complex
  than high level of abstraction virtual machines,

* Argante code is completely universal - you can use it for high-speed
  graphics, text applications, sophisticated network solutions (virtual
  routers, etc) - all the time, code is simple, clean, easy to develop
  and maintain, with no expensive, black-box add-ons,

* low-level exceptions will enforce programmer not to ignore any errors,
  avoiding downside-up error propagation problems in complex projects,

* hierarchical access control mechanism provides unified interpretation
  of all I/O objects, I/O operations and permissions assigned to them;
  this system is easy to visualise, develop and implement,

* virtual filesystem can be used to obtain complete, platform-independent,
  unified control of any resources while integrating it with external fs
  objects easily (unlimited real_fs-into-svfs mapping possibilities),

* virtual code cannot be altered - overwritten or inserted - in any way;
  it means Argante code cannot be exploited using overflows or similar
  bugs,

* virtual code cannot access any native processor code/cpu functions 
  directly; this means Argante is not sensitive to most of the underlying
  layer security problems or architecture bugs, adding strong access control
  and parameter verification layer, allowing programmer to choose only the
  required functionality.

* static process model enforces programmers to build appropritate functional
  blocks (OSI architecture model) instead of "all-in-one" process/thead-per-
  -client solutions,

* privledges control and strict interprocess communication rules will force
  programmers to design communication interfaces carefully; in unix 
  environments, any misfits or differences between expected and real
  interface for external tools and services are really harmful,

* Argante code can interact with native solutions with no problems; this
  means Argante can be used to manage cluster traffic and to redirect it
  to specific real system services, etc,

* privledges control in conjunction with static code will allow programmer
  to use only required privledges and to switch between them
  any I/O operations; UIDs within execution domains will allow programmer
  to implement multiuser systems in unified and secure way,

* Argante is portable over platforms and does not expect you to run it on
  dedicated boxes; it can co-exist with already implemented solutions on the
  top of most of the popular unices.

* Argante is modular; it consists of microkernel and numerous hot-pluggable
  modules providing various capabilities; every time new functionality
  should be introduced, simple module written in any language can be
  loaded instantly,

* All Argante subsystems are designed in secure way, avoiding races, etc,

* Argante kernel uses its own implementation of processes, which is more
  effective and resource-saving,

* Argante provides high-level language translator with numerous Ada-alike
  conventions, making programs more readable and more accurate,

* Argante provides transparent remote process communication layer, allowing
  design of complex, redundant rIPC architectures (stars, rings, hybrid webs);
  these architectures can be set automatically and modified on request
  by virtual process itself; there's no difference in interprocess
  communication between two processes on the same host or on the different
  continents and no need for any code modifications; this makes cluster
  management really easy; rIPC provides unicast/multicast messages,
  stream and block (memory sharing) connections with strong request
  authorization,

* Argante management and process workspace are completely separated; this
  means virtual process cannot gain administrator privledges, because
  there are no administrator privledges in VOS,

* Console / virtual terminal support for processes is provided; on
  external request, virtual process can attach to choosen tty or I/O device;
  this allows programmers to use Argante in authorization process, or to
  communicate with external users via telnet, ssh, to be started from inetd,
  etc - all in really easy way.

* And - at the end - all of these features are joined together in one,
  complete LGPL open-source solution, which can be treated either as a
  completely independent destination OS in development process, or as a
  safe, effective, stable and simple sandbox for the critical parts of
  your development!

* more to come :)

